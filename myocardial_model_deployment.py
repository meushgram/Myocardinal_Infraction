# -*- coding: utf-8 -*-
"""Copy of Myocardial_Model_Deployment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18T5sfHn9C0DXv8YVjP7Pp9VGtBVQYO1p
"""
import pickle

import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')
warnings.simplefilter('ignore')
from sklearn.impute import SimpleImputer

data = pd.read_csv('Myocardial infarction complications.csv')

imputer = SimpleImputer(strategy='median')
df_imputed = pd.DataFrame(imputer.fit_transform(data))

# Imputation removed column names hence, getting back the names
df_imputed.columns = data.columns

DC_Data = df_imputed[['AGE' ,'STENOK_AN' , 'FK_STENOK' ,'IBS_POST' ,'ZSN_A', 'nr_04' , 'S_AD_KBRIG' , 'D_AD_KBRIG',
'S_AD_ORIT' , 'D_AD_ORIT' , 'K_SH_POST' ,'ant_im' , 'lat_im' , 'ritm_ecg_p_07' , 'n_r_ecg_p_04' , 'n_p_ecg_p_10' , 
'n_p_ecg_p_12' ,'K_BLOOD' ,'NA_BLOOD' ,'ALT_BLOOD','AST_BLOOD' ,'L_BLOOD' , 'ROE' , 'TIME_B_S' , 'R_AB_1_n' , 'R_AB_3_n' 
,'NA_KB','NOT_NA_KB', 'NITR_S' , 'NA_R_1_n' , 'GEPAR_S_n' ,'RAZRIV' ,'DRESSLER' ,'ZSN','REC_IM','LET_IS']]
DC_Data

array = DC_Data.values
X = array[:,0:35]
Y = array[:,35]

from sklearn.model_selection  import  train_test_split
x_train , x_test , y_train , y_test = train_test_split(X , Y , test_size = 0.25, random_state = 0)

# Random Forest Classification
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score
from sklearn.ensemble import RandomForestClassifier
num_trees = 10
model_rf = RandomForestClassifier(n_estimators = num_trees, criterion = 'entropy', random_state = 0)
results_rf = cross_val_score(model_rf, x_train, y_train, cv=10)
print(results_rf.mean())

model_rf.fit(x_train, y_train)
pickle.dump(model_rf,open('model-RF','wb'))
pickle.dump(X,open('sampleinput','wb'))
#Predict for X dataset
print('------------------------')
print(x_test)
print(type(x_test))
print('------------------------')
y_pred_rf = model_rf.predict(x_test)
pickle.dump(x_test,open('testpred','wb'))
print(y_pred_rf[0])
# Confusion Matrix for the model accuracy
from sklearn.metrics import confusion_matrix
cm_rf = confusion_matrix(y_test,y_pred_rf)
import seaborn as sn
plt.figure(figsize = (10,7))
sn.heatmap(cm_rf, annot=True, fmt='d')
plt.xlabel('Predicted')
plt.ylabel('Truth')

#print(accuracy_score(y_test , y_pred_rf))

#Classification report
#from sklearn.metrics import classification_report
#print(classification_report(y_test,y_pred_rf))

print('------------------------')
x = x_test[1:20]
print(x)
x = pd.DataFrame(x)
print(x)
x.to_csv('sampleInputNew.csv')

print(y_pred_rf)